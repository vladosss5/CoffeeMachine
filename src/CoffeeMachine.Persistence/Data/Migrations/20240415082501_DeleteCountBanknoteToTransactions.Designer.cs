// <auto-generated />
using System;
using CoffeeMachine.Persistence.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoffeeMachine.Persistence.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240415082501_DeleteCountBanknoteToTransactions")]
    partial class DeleteCountBanknoteToTransactions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Banknote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<int>("Nominal")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("money_pk");

                    b.ToTable("Banknotes");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.BanknoteMachine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("BanknoteId")
                        .HasColumnType("bigint");

                    b.Property<int>("CountBanknote")
                        .HasColumnType("integer");

                    b.Property<long>("MachineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("banknotes_machines_pk");

                    b.HasIndex("BanknoteId");

                    b.HasIndex("MachineId");

                    b.ToTable("BanknotesMachines");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Coffee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("coffee_pk");

                    b.ToTable("Coffees");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.CoffeeInMachine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("CoffeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("MachineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id")
                        .HasName("coffee_in_machine_pk");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("MachineId");

                    b.ToTable("CoffeesInMachines");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Machine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<int?>("Balance")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id")
                        .HasName("machine_pk");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("CoffeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("MachineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id")
                        .HasName("purchase_pk");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("MachineId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("BanknoteId")
                        .HasColumnType("bigint");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Type")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("transaction_pk");

                    b.HasIndex("BanknoteId");

                    b.HasIndex("OrderId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.BanknoteMachine", b =>
                {
                    b.HasOne("CoffeeMachine.Domain.Models.Banknote", "Banknote")
                        .WithMany("BanknotesMachines")
                        .HasForeignKey("BanknoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("banknotes_machines_banknote_fk");

                    b.HasOne("CoffeeMachine.Domain.Models.Machine", "Machine")
                        .WithMany("BanknotesMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("banknotes_machines_machine_fk");

                    b.Navigation("Banknote");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.CoffeeInMachine", b =>
                {
                    b.HasOne("CoffeeMachine.Domain.Models.Coffee", "Coffee")
                        .WithMany("CoffeesInMachines")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("coffee_in_machine_coffee_fk");

                    b.HasOne("CoffeeMachine.Domain.Models.Machine", "Machine")
                        .WithMany("CoffeesInMachines")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("coffee_in_machine_machine_fk");

                    b.Navigation("Coffee");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Order", b =>
                {
                    b.HasOne("CoffeeMachine.Domain.Models.Coffee", "Coffee")
                        .WithMany("Purchases")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchase_coffee_fk");

                    b.HasOne("CoffeeMachine.Domain.Models.Machine", "Machine")
                        .WithMany("Purchases")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchase_machine_fk");

                    b.Navigation("Coffee");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Transaction", b =>
                {
                    b.HasOne("CoffeeMachine.Domain.Models.Banknote", "Banknote")
                        .WithMany("Transactions")
                        .HasForeignKey("BanknoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("transaction_banknote_fk");

                    b.HasOne("CoffeeMachine.Domain.Models.Order", "Order")
                        .WithMany("Transactions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("transaction_purchase_fk");

                    b.Navigation("Banknote");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Banknote", b =>
                {
                    b.Navigation("BanknotesMachines");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Coffee", b =>
                {
                    b.Navigation("CoffeesInMachines");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Machine", b =>
                {
                    b.Navigation("BanknotesMachines");

                    b.Navigation("CoffeesInMachines");

                    b.Navigation("Purchases");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Models.Order", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
